import { Restaurant } from 'src/apis/restaurant/entities/restaurant.entity';
import { Collection } from './entities/collection.entity';
import {
  Injectable,
  InternalServerErrorException,
  NotFoundException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm/repository/Repository';
import { CollectionItem } from './entities/collection-item.entity';
import { Post } from '../post/entities/post.entity';
import { In } from 'typeorm';
import { Comment } from '../comment/entities/comment.entity';
import { PostLikeService } from '../post/post-like.service';
import { ImageRepository } from '../post/image.repository';
import { PostHashtagService } from '../post/post-hashtag.service';
import { RestaurantService } from '../restaurant/restaurant.service';
import { UploadService } from '../upload/upload.service';

@Injectable()
export class MyListService {
  constructor(
    @InjectRepository(Collection)
    private collectionRepository: Repository<Collection>,
    @InjectRepository(CollectionItem)
    private collectionItemRepository: Repository<CollectionItem>,
    @InjectRepository(Post)
    private postRepository: Repository<Post>,
    @InjectRepository(Comment) private commentRepository: Repository<Comment>,
    private readonly likeService: PostLikeService,
    private imageRepository: ImageRepository,
    private readonly postHashtagService: PostHashtagService,
    private readonly restaurantService: RestaurantService,
    private readonly uploadService: UploadService,
  ) {}

  /*
    ### 23.03.14
    ### ÌëúÏ†ïÌõà
    ### MyList ÏÉÅÏÑ∏Î≥¥Í∏∞ [Í∞ÄÍ≤åÎ™Ö/ÌèâÏ†ê/Ìè¨Ïä§ÌåÖÎÇ¥Ïö©/Ïù¥ÎØ∏ÏßÄ]
    */

  async getMyListsDetail(userId: number, collectionId: number) {
    try {
      const myLists = await this.collectionRepository.find({
        relations: {
          collectionItems: {
            post: true,
            restaurant: true,
          },
        },
        where: {
          user_id: userId,

          deletedAt: null,
          type: 'myList',
          id: collectionId,
        },
        select: { id: true, name: true },
      });

      // Ìï¥Îãπ postIdÎûë ÏùºÏπòÌïòÎäî Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
      const postImage = await this.imageRepository.find({
        where: {
          post: { id: myLists[0].collectionItems[0].post.id },
        },
      });

      // postÍ∞Ä nullÏùº Í≤ΩÏö∞ rating ÎåÄÏã† null Í∞íÏùÑ Î∞òÌôò
      const myListsDetail = myLists.map((list) => ({
        id: list.id,
        name: list.name,
        description: list.description,
        image: list.image,
        collectionItems: list.collectionItems.map((item) => ({
          id: item.id,
          post: {
            id: item.post?.id ?? null,
            rating: item.post?.rating ?? null,
          },
          restaurant: {
            id: item.restaurant?.id ?? null,
            place_name: item.restaurant?.place_name ?? null,
          },
        })),
      }));
      console.log(myListsDetail, postImage);
      return [myListsDetail, postImage];
    } catch (err) {
      console.error(err);
      throw new InternalServerErrorException(
        'Something went wrong while processing your request. Please try again later.',
      );
    }
  }

  /*
  ### 23.03.13
  ### Ïù¥ÎìúÎ≥¥Îùº
  ### Ìè¨Ïä§ÌåÖ ÏÉÅÏÑ∏Î≥¥Í∏∞.Ï¢ãÏïÑÏöî Í∏∞Îä• Ï∂îÍ∞Ä. Î∂àÎü¨Ïò§Îäî Ïú†Ï†Ä Ï†ïÎ≥¥ ÏàòÏ†ï
  hashtags 135Î≤àÏß∏ Î¨∏Ï†úÎ∞úÏÉù...
  */
  async getPostById(postId: number, userId: number) {
    try {
      const post = await this.postRepository.find({
        where: { id: postId, deleted_at: null, visibility: 'public' },
        select: {
          id: true,
          content: true,
          rating: true,
          updated_at: true,
          visibility: true,
          restaurant: {
            kakao_place_id: true,
            address_name: true,
            category_name: true,
            place_name: true,
            road_address_name: true,
          },
          user: { id: true, nickname: true, profile_image: true },
          images: { id: true, file_url: true },
          collectionItems: { id: true, collection: { id: true } },
        },
        relations: {
          user: true,
          restaurant: true,
          hashtags: true,
          images: true,
          collectionItems: {
            collection: true,
          },
        },
      });

      if (!post) {
        throw new NotFoundException(`Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ìè¨Ïä§Ìä∏ÏûÖÎãàÎã§.`);
      }

      const totalLikes = await this.likeService.getLikesForPost(postId);

      const hashtags = post[0].hashtags.map(({ name }) => ({ name }));

      const { isLiked } = await this.likeService.getLikedStatusforOnePost(
        postId,
        userId,
      );

      const totalComments = await this.commentRepository.count({
        where: { deleted_at: null, post: { id: postId } },
      });

      return {
        id: post[0].id,
        content: post[0].content,
        rating: post[0].rating,
        updated_at: post[0].updated_at,
        user: post[0].user,
        restaurant: post[0].restaurant,
        images: post[0].images,
        totalLikes,
        hashtags,
        isLiked,
        totalComments,
        myList: post[0].collectionItems,
        visibility: post[0].visibility,
      };
    } catch (err) {
      if (err instanceof NotFoundException) {
        throw err;
      } else {
        console.error(err);
        throw new InternalServerErrorException(
          'Something went wrong while processing your request. Please try again later.',
        );
      }
    }
  }

  /*
    ### 23.03.15
    ### ÌëúÏ†ïÌõà
    ### MyList ÏÉÅÏÑ∏ ÎçîÎ≥¥Í∏∞(ÎèôÏùºÌïú Ìè¨Ïä§Ìä∏ Î∂àÎü¨Ïò§Í∏∞) üî•
    */

  /* Î°úÏßÅ ÏÑ§Î™Ö
      1. ÎßõÏßëÏÉÅÏÑ∏Î¶¨Ïä§Ìä∏ PAGE2Ïóê ÏûàÎäî ÎßõÏßëÏùÑ ÌÅ¥Î¶≠ÌïúÎã§. (Î†àÏä§ÌÜ†ÎûëID)
      2. ÏΩúÎ†âÏÖò ÏïÑÏù¥ÌÖúÏóê ÏûàÎäî Î†àÏä§ÌÜ†ÎûëÏïÑÏù¥ÎîîÏôÄ ÏΩúÎ†âÏÖòÏïÑÏù¥ÎîîÍ∞Ä ÎëòÎã§ ÏùºÏπòÌïòÎäî Ï†ïÎ≥¥Î•º Ï∞æÎäîÎã§.
      3. Î†àÏä§ÌÜ†ÎûëÏùò Ï†ïÎ≥¥ÏôÄ Í≤åÏãúÎ¨º Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò®Îã§
      Î†àÏä§ÌÜ†Îûë Ï†ïÎ≥¥: Í∞ÄÍ≤åÏù¥Î¶Ñ, ÏóÖÏ¢Ö(Ïπ¥Ìéò), Ï£ºÏÜå
      Ìè¨Ïä§ÌåÖ Ï†ïÎ≥¥: ÏÑ§Î™Ö, Ïù¥ÎØ∏ÏßÄ, ÌèâÏ†ê ,Ï¢ãÏïÑÏöî, ÎåìÍ∏Ä Îì± 
    */
  async getMyListsDetailPost(
    userId: number,
    restaurantId: number,
    collectionId: number,
  ) {
    try {
      //Ïª¨Î†âÏÖòÏïÑÏù¥ÌÖúÏóêÏÑú ÎßõÏßëÏïÑÏù¥ÎîîÏóê Í¥ÄÌïú Ï†ïÎ≥¥ Ï∞æÍ∏∞
      const existRestaurant = await this.collectionItemRepository.find({
        where: {
          restaurant: { id: restaurantId },
          collection: { id: collectionId },
        },
        select: {
          post: {
            id: true,
            content: true,
            rating: true,
            restaurant: {
              id: true,
              address_name: true,
              category_name: true,
              kakao_place_id: true,
              place_name: true,
              road_address_name: true,
            },
            user: { id: true, nickname: true, profile_image: true },
          },
        },
        relations: ['restaurant', 'post'],
      });

      return existRestaurant;
    } catch (err) {
      console.error(err);
      throw new InternalServerErrorException(
        'Something went wrong while processing your request. Please try again later.',
      );
    }
  }

  /*
    ### 23.03.14
    ### ÌëúÏ†ïÌõà
    ### MyList Ïù¥Î¶ÑÏ°∞Ìöå(ÎÇ¥Í∫º) üëç
    */

  async getMyListsName(userId: number) {
    try {
      const myLists = await this.collectionRepository.find({
        where: { user_id: userId, deletedAt: null, type: 'myList' },
        select: { id: true, name: true },
      });

      return myLists;
    } catch (err) {
      console.error(err);
      throw new InternalServerErrorException(
        'Something went wrong while processing your request. Please try again later.',
      );
    }
  }

  /*
    ### 23.03.14
    ### ÌëúÏ†ïÌõà
    ### MyList Ï†ÑÏ≤¥Ï°∞Ìöå(ÎÇ¥Í∫º)
    */

  // Ìï¥Í≤∞Ìï¥ÏïºÌï† ÏÇ¨Ìï≠ fix:16 fix30
  // 1. postÏóêÏÑú id: 1Ïù∏ Í∞íÎßå Í∞ÄÏ†∏Ïò¥ => Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏàòÏ†ïÏúºÎ°ú Ìï¥Í≤∞ÏôÑÎ£åüî•
  // 2. postÎ•º 3Í∞úÍπåÏßÄÎßå Ï†úÌïúÌï¥ÏÑú Í∞ÄÏ†∏Ïò§Í≥† Ïã∂Ïùå => mapÏúºÎ°ú Ìï¥Í≤∞ÏôÑÎ£åüî•
  async getMyListsMe(userId: number) {
    try {
      const myLists = await this.collectionRepository.find({
        relations: {
          collectionItems: {
            post: true,
            restaurant: true,
          },
        },
        where: { user_id: userId, deletedAt: null, type: 'myList' },
        select: { name: true, description: true, image: true },
      });

      return myLists.map((collection) => ({
        ...collection,
        collectionItems: collection.collectionItems.slice(0, 3),
      }));
    } catch (err) {
      console.error(err);
      throw new InternalServerErrorException(
        'Something went wrong while processing your request. Please try again later.',
      );
    }
  }

  /*
    ### 23.03.10
    ### ÌëúÏ†ïÌõà
    ### MyList Ï†ÑÏ≤¥Ï°∞Ìöå(ÎÇ®ÏùòÍ∫º)
    */

  // Ìï¥Í≤∞Ìï¥ÏïºÌï† ÏÇ¨Ìï≠ fix:16 fix30
  // 1. postÏóêÏÑú id: 1Ïù∏ Í∞íÎßå Í∞ÄÏ†∏Ïò¥ => Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏàòÏ†ïÏúºÎ°ú Ìï¥Í≤∞ÏôÑÎ£åüî•
  // 2. postÎ•º 3Í∞úÍπåÏßÄÎßå Ï†úÌïúÌï¥ÏÑú Í∞ÄÏ†∏Ïò§Í≥† Ïã∂Ïùå => mapÏúºÎ°ú Ìï¥Í≤∞ÏôÑÎ£åüî•
  async getMyListsAll(userId: number) {
    try {
      const myLists = await this.collectionRepository.find({
        relations: {
          collectionItems: {
            post: true,
            restaurant: true,
          },
        },
        where: { user_id: userId, deletedAt: null, type: 'myList' },
        select: { name: true, description: true, image: true },
      });

      return myLists.map((collection) => ({
        ...collection,
        collectionItems: collection.collectionItems.slice(0, 3),
      }));
    } catch (err) {
      console.error(err);
      throw new InternalServerErrorException(
        'Something went wrong while processing your request. Please try again later.',
      );
    }
  }

  /*
    ### 23.03.10
    ### ÌëúÏ†ïÌõà
    ### MyList ÏÉùÏÑ±
    */
  async createMyList(userId: number, name: string, type: 'myList') {
    try {
      const myLists = await this.collectionRepository.insert({
        user_id: userId,
        name,
        type: 'myList',
      });
      return myLists;
    } catch (err) {
      console.error(err);
      throw new InternalServerErrorException(
        'Something went wrong while processing your request. Please try again later.',
      );
    }
  }

  /*
    ### 23.03.10
    ### ÌëúÏ†ïÌõà
    ### MyList ÏàòÏ†ï
    */
  //üî•Î¨∏Ï†ú Î∞úÏÉùÌï†ÎßåÌïú Î∂ÄÎ∂Ñ: myListIdÎäî collectionIdÏôÄ Í∞ôÏïÑÏÑú Î¨∏Ï†úüî•
  // Ïòà) 1Î≤àÏú†Ï†Ä ÎßàÏù¥Î¶¨Ïä§Ìä∏ Í≤ÄÏÉâÌõÑ, 1Î≤àÏùò 3Î≤àÏß∏ ÎßàÏù¥Î¶¨Ïä§Ìä∏ ÏàòÏ†ï
  async updateMyList(
    userId: number,
    collectionId: number,
    name: string,
    image: string,
    description: string,
    visibility: 'public' | 'private',
  ) {
    try {
      // idÏôÄ typeÏù¥ Î™®Îëê ÏùºÏπòÌïòÎäî Collection ÏóîÌã∞Ìã∞Î•º Ï∞æÎäîÎã§.
      const myList = await this.collectionRepository.find({
        relations: {
          user: true,
        },
      });

      if (!myList) {
        throw new NotFoundException('ÎßàÏù¥Î¶¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
      }

      await this.collectionRepository.update(
        { id: collectionId },
        {
          name,
          image,
          description,
          visibility,
        },
      );
    } catch (err) {
      if (err instanceof NotFoundException) {
        throw err;
      } else {
        console.error(err);
        throw new InternalServerErrorException(
          'Something went wrong while processing your request. Please try again later.',
        );
      }
    }
  }

  /*
    ### 23.03.10
    ### ÌëúÏ†ïÌõà
    ### MyList ÏÇ≠Ï†ú
    */
  async deleteMyList(userId: number, id: number) {
    try {
      const result = await this.collectionRepository.softDelete(id); // soft deleteÎ•º ÏãúÏºúÏ£ºÎäî Í≤ÉÏù¥ ÌïµÏã¨ÏûÖÎãàÎã§!
      if (result.affected === 0) {
        throw new NotFoundException('ÎßàÏù¥Î¶¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
      }
    } catch (err) {
      if (err instanceof NotFoundException) {
        throw err;
      } else {
        console.error(err);
        throw new InternalServerErrorException(
          'Something went wrong while processing your request. Please try again later.',
        );
      }
    }
  }

  /*
    ### 23.03.10
    ### ÌëúÏ†ïÌõà
    ### MyList Ìè¨Ïä§ÌåÖ Ï∂îÍ∞Ä
    */

  async myListPlusPosting(postId: number, collectionId: number[]) {
    try {
      for (let i = 0; i < collectionId.length; i++) {
        const item = collectionId[i];

        // // Í∞ôÏùÄ Ïª¨Î†âÏÖò ÏïàÏóê ÎèôÏùºÌïú Ìè¨Ïä§Ìä∏Îäî ÏïàÎì§Ïñ¥Í∞ÄÎäî Í∏∞Îä• => ÌèêÍ∏∞(Ï§ëÎ≥µÎêòÏïºÌï®)
        // const existingItem = await this.collectionItemRepository.findOne({
        //   where: {
        //     post: { id: postId },
        //     collection: { id: item },
        //   },
        // });

        // if (existingItem) {
        //   continue; // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî CollectionItemÏù¥Î©¥ Ìï¥Îãπ ÏΩúÎ†âÏÖòÏóê Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÍ≥†, Îã§Ïùå ÏΩúÎ†âÏÖòÏúºÎ°ú ÎÑòÏñ¥Í∞ê
        // }

        const collectionItem = this.collectionItemRepository.create({
          post: { id: postId },
          collection: { id: item },
        });
        await this.collectionItemRepository.save(collectionItem);
      }
    } catch (err) {
      if (err instanceof NotFoundException) {
        throw err;
      } else {
        console.error(err);
        throw new InternalServerErrorException(
          'Something went wrong while processing your request. Please try again later.',
        );
      }
    }
  }

  /*
    ### 23.03.10
    ### ÌëúÏ†ïÌõà
    ### MyList Ìè¨Ïä§ÌåÖ ÏÇ≠Ï†ú
    */

  //Ìï¥Îãπ collectionIdÏùºÎïå ÏùºÏπòÌïòÎäî postIdÎßå ÏÇ≠Ï†úÌïòÎäî Í∏∞Îä•
  // üî•Ï£ºÏùòÏÇ¨Ìï≠: NumberÎßå ÏÇ≠Ï†ú Í∞ÄÎä•üî•
  async myListMinusPosting(postId: number, collectionId: number) {
    try {
      if (collectionId) {
        await this.collectionItemRepository.delete({
          collection: { id: collectionId },
          post: { id: postId },
        });
      } else {
        throw new NotFoundException('Ìï¥Îãπ Ïª¨Î†âÏÖòÏùÄ ÏóÜÏäµÎãàÎã§.');
      }
    } catch (err) {
      if (err instanceof NotFoundException) {
        throw err;
      } else {
        console.error(err);
        throw new InternalServerErrorException(
          'Something went wrong while processing your request. Please try again later.',
        );
      }
    }
  }

  /*
    ### 23.03.17
    ### ÌëúÏ†ïÌõà
    ### MyList Ìè¨Ïä§ÌåÖ ÏóÖÎç∞Ïù¥Ìä∏üî•
    */

  /* Î°úÏßÅ ÏÑ§Î™Ö
      1. ÏûÖÎ†•Î∞õÏùÄ Í∞íÏúºÎ°ú Ïª¨Î†âÏÖòÏóê ÏûàÎäî Ìè¨Ïä§Ìä∏ÏïÑÏù¥ÎîîÎ•º Î™®Îëê Ï∞æÎäîÎã§
      2. Ïª¨Î†âÏÖòÏïÑÏù¥ÌÖúÏóêÏÑú Ìï¥Îãπ Ìè¨Ïä§Ìä∏ ÏïÑÏù¥ÎîîÎ°ú Í≤ÄÏÉâÎêòÎäîÍ±∞ Îã§ÏßÄÏö¥Îã§.
      3. ÏûÖÎ†• Î∞õÏùÄ Í∞íÏùÑ Ï†ÄÏû•ÌïúÎã§.
      Ïù¥Ïäà: ÏûêÏã†Ïùò Ìè¨Ïä§ÌÑ∞Îßå ÎßàÏù¥Î¶¨Ïä§Ìä∏Ïóê Ï†ÄÏû•Ìï† Ïàò ÏûàÍ∏∞Ïóê Í∞ÄÎä•, Îç∞Ïù¥ÌÑ∞ ÎÇ≠ÎπÑÏΩîÎìúÏù¥Í∏¥ Ìï®„Ö†„Ö†
      */
  async myListUpdatePosting(postId: number, collectionId: number[]) {
    try {
      // 1. ÏûÖÎ†•Î∞õÏùÄ Í∞íÏúºÎ°ú Ïª¨Î†âÏÖòÏïÑÏù¥ÌÖúÏóê ÏûàÎäî Ìè¨Ïä§Ìä∏ÏïÑÏù¥ÎîîÎ•º Î™®Îëê Ï∞æÎäîÎã§.
      const findPostId = await this.collectionItemRepository.find({
        relations: ['post', 'collection'],
        where: {
          post: { id: postId },
          collection: { type: 'myList' }, //ÎßàÏù¥Î¶¨Ïä§Ìä∏ ÏùºÎïåÎßå!
        },
      });

      // 2. Ïª¨Î†âÏÖòÏïÑÏù¥ÌÖúÏóêÏÑú Ìï¥Îãπ Ìè¨Ïä§Ìä∏ ÏïÑÏù¥ÎîîÎ°ú Í≤ÄÏÉâÎêòÎäîÍ±∞ Îã§ÏßÄÏö¥Îã§.
      await this.collectionItemRepository.remove(findPostId);
      // 3. ÏûÖÎ†•Î∞õÏùÄ Ï†ïÎ≥¥Î°ú Î™®Îëê ÎÑ£Ïñ¥Ï§ÄÎã§.
      await this.myListPlusPosting(postId, collectionId);
      return;
    } catch (err) {
      if (err instanceof NotFoundException) {
        throw err;
      } else {
        console.error(err);
        throw new InternalServerErrorException(
          'Something went wrong while processing your request. Please try again later.',
        );
      }
    }
  }
}
